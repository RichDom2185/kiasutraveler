getSimulationData <- function(date,time) {
url = "https://api.data.gov.sg/v1/transport/taxi-availability?date_time="
url <- paste0(url,date,"T",time)
data <- fromJSON(url)
data <- as.data.frame(data$features$geometry$coordinates)
colnames(data) <- c("long","lat")
data
}
output$plotAvailability <-renderPlot(
{
if(input$display == "Static") {
if(input$format=='Point') {
ggmap(getMap()) +  geom_point(data=getAvailabilityData(), aes(x = long, y = lat),color='red',alpha=0.5)
}
else if (input$format == 'Heatmap'){
ggmap(getMap()) + stat_density2d(data=getAvailabilityData(), aes(x=long, y=lat,  fill = ..level.., alpha = ..level..), size = 2, geom = 'polygon')+
scale_fill_gradient(low = "green", high = "red", guide=FALSE) + scale_alpha(range = c(0, 1), guide = FALSE)
}
else {print("Wrong format name")}
}
else { #simulation
date <- as.character(input$date)
time <- as.POSIXlt('2005-04-19 00:00:00')
time$hour <- input$hour
strtime <- strftime(time, "%T")
if(input$format=='Point') {
ggmap(getMap()) +  geom_point(data=getSimulationData(date,strtime), aes(x = long, y = lat),color='red',alpha=0.5)
}
else if (input$format == 'Heatmap'){
ggmap(getMap()) + stat_density2d(data=getSimulationData(date,strtime), aes(x=long, y=lat,  fill = ..level.., alpha = ..level..), size = 2, geom = 'polygon')+
scale_fill_gradient(low = "green", high = "red", guide=FALSE) + scale_alpha(range = c(0, 1), guide = FALSE)
}
else {print("Wrong format name")}
}
}
)
output$plotAvailabilityInLeaflet <-renderLeaflet(
{
if(input$display == "Static") {
if(input$format=='Point') {
leaflet(getAvailabilityData()) %>% addProviderTiles(providers$CartoDB.Positron) %>% addCircleMarkers(lng = ~long, lat = ~lat, radius = 2)
}
else if (input$format == 'Heatmap'){
leaflet(getAvailabilityData()) %>% addProviderTiles(providers$CartoDB.Positron) %>% addWebGLHeatmap(lng = ~long, lat = ~lat, size = 800,alphaRange = 0.8, opacity = 0.8)
}
else {print("Wrong format name")}
}
else { #simulation
date <- as.character(input$date)
time <- as.POSIXlt('2005-04-19 00:00:00')
time$hour <- input$hour
strtime <- strftime(time, "%T")
if(input$format=='Point') {
leaflet(getSimulationData(date,strtime)) %>% addProviderTiles(providers$CartoDB.Positron)
}
else if (input$format == 'Heatmap'){
leaflet(getSimulationData(date,strtime)) %>% addProviderTiles(providers$CartoDB.Positron) %>% addWebGLHeatmap(lng = ~long, lat = ~lat, size = 800,alphaRange = 0.8, opacity = 0.8)
}
else {print("Wrong format name")}
}
}
)
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(shinyTime)
library(ggmap)
library(jsonlite)
# Define UI for app
ui <- pageWithSidebar(
headerPanel("View Singapore Taxi Availability"),
sidebarPanel(
dateInput(inputId = "date", "Date:", value = Sys.Date()),
timeInput(inputId = "time", "Time:", value = Sys.time()),
radioButtons(inputId = "format",label="View Format",
choices = c("Point","Heatmap"))
),
mainPanel (
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
#get data
request <- function(req.date, req.time){
library(jsonlite)
url <- paste0("https://api.data.gov.sg/v1/transport/taxi-availability?date_time=", req.date, "T", req.time)
data <- fromJSON(url)
taxidata <- as.data.frame(data$features$geometry$coordinates)
return(taxidata)
}
request("2020-01-02", "12:09:09")
#get data
request <- function(req.date, req.time){
library(jsonlite)
url <- paste0("https://api.data.gov.sg/v1/transport/taxi-availability?date_time=", req.date, "T", req.time)
data <- fromJSON(url)
taxidata <- as.data.frame(data$features$geometry$coordinates)
return(taxidata)
}
knitr::opts_chunk$set(echo = TRUE)
#get data
request <- function(req.date, req.time){
library(jsonlite)
url <- paste0("https://api.data.gov.sg/v1/transport/taxi-availability?date_time=", req.date, "T", req.time)
data <- fromJSON(url)
taxidata <- as.data.frame(data$features$geometry$coordinates)
return(taxidata)
}
request("2023-03-31", "15:09:09")
library(jsonlite)
url <- paste0("https://api.data.gov.sg/v1/transport/taxi-availability?date_time=", req.date, "T", req.time)
url <- paste0("https://api.data.gov.sg/v1/transport/taxi-availability?date_time=")
data <- fromJSON(url)
url <- paste0("https://api.data.gov.sg/v1/transport/taxi-availability")
data <- fromJSON(url)
taxidata <- as.data.frame(data$features$geometry$coordinates)
taxidata
library(shiny)
library(ggplot2)
library(shinyTime)
library(ggmap)
library(jsonlite)
# Define UI for app
ui <- pageWithSidebar(
headerPanel(title = "View Singapore Taxi Availability"),
sidebarPanel(
dateInput(inputId = "Date", "Date:", value = Sys.Date()),
timeInput(inputId = "time", "Time:", value=Sys.time()),
radioButtons(inputId = "format",label="View Format",
choices = c("Point","Heatmap"))
),
mainPanel (
plotOutput(outputId = "PlotAvailability"),
tabPanel()
)
)
getAvailabilityData <- function(date, time) {
print("Getting data ...")
url = "https://api.data.gov.sg/v1/transport/taxi-availability?date_time="
url <- paste0(url,date,"T",time)
data <- jsonlite::fromJSON(url)
data <- as.data.frame(data$features$geometry$coordinates)
colnames(data) <- c("long","lat")
data
}
# Define server logic
server <- function(input, output) {
#The function to get data for given date and time
#date must in format "yyyy-MM-dd"
#time must in format "HH:mm:ss"
map <- get_map('Singapore', zoom = 11)
output$PlotAvailability <-renderPlot(
{
date <- as.character(input$Date)
time <- strftime(input$time, "%T")
data <- getAvailabilityData(date,time)
if(input$format=='Point') {
ggmap(map) +  geom_point(data=data, aes(x = long, y = lat),color='red',alpha=0.5)
}
else if (input$format == 'Heatmap'){
ggmap(map) + stat_density2d(data=data, aes(x=long, y=lat,  fill = ..level.., alpha = ..level..),
size = 2, geom = 'polygon') +
scale_fill_gradient(low = "green", high = "red", guide=FALSE) + scale_alpha(range = c(0, 1), guide = FALSE)
}
else {print("Wrong format name")}
}
)
}
runApp('R Course/final-app.R')
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("random draws from normal vs uniform distributions"),
sidebarLayout(position = "right",
sidebarPanel(
sliderInput(inputId = "num",
label = "Choose numbern of draws",
value = 25, min = 1000, max = 10000)
),
mainPanel(
tabsetPanel(
tabPanel("Frequency",plotOutput("hist")),
tabPanel("Density",plotOutput("den"))
)
)
)
)
server <- function(input, output) {
data<-reactive({
rbind(data.frame(value=rnorm(input$num),dist=rep("normal",input$num)),
data.frame(value=runif(input$num,-2,2),dist=rep("uniform",input$num)))
})
output$hist <- renderPlot({
p<-ggplot(data(), aes(x=value,fill=dist))+theme_grey(base_size=20)
p+geom_histogram(binwidth=0.1,position="dodge")+labs(title="histogram")
})
output$den <- renderPlot({
p<-ggplot(data(), aes(x=value,fill=dist))+theme_grey(base_size=20)
p+geom_density(alpha=1/3)+labs(title="density plot")
})
}
shinyApp(ui = ui, server = server)
library(ggmap) # to get crime dataset
head(crime)
data=crime[c("month","day","address","lon","lat","offense")]
data=subset(data, offense == "murder")
library(shiny)
library(leaflet)
ui <- fluidPage(
selectInput(inputId="dayofweek",label="show by the day of week",
choices=c("monday","tuesday","wednesday","thursday","friday","saturday","sunday")),
leafletOutput("murder")
)
server <- function(input, output, session) {
output$murder <- renderLeaflet({
leaflet(data=data[data$day==input$dayofweek,])%>%
addTiles() %>%
addMarkers(~lon,~lat,popup=~address)
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
library(shinyTime)
library(ggmap)
library(jsonlite)
# Define UI for app
ui <- pageWithSidebar(
headerPanel("View Singapore Taxi Availability"),
sidebarPanel(
dateInput(inputId = "date", "Date:", value = Sys.Date()),
timeInput(inputId = "time", "Time:", value = Sys.time()),
radioButtons(inputId = "format",label="View Format",
choices = c("Point","Heatmap"))
),
mainPanel (
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
# Define UI for app
ui <- pageWithSidebar(
headerPanel("View Singapore Taxi Availability"),
sidebarPanel(
dateInput(inputId = "date", "Date:", value = Sys.Date()),
timeInput(inputId = "time", "Time:", value = Sys.time()),
radioButtons(inputId = "format",label="View Format",
choices = c("Point","Heatmap"))
),
mainPanel (
)
)
server <- function(input, output) {
}
shinyApp(ui = ui, server = server)
library(shinyTime)
runApp('Week 10 intro to R shiny/app-V2_ggmap.R')
runApp('R Course/final-app.R')
runApp('Week 10 intro to R shiny/app-V2_ggmap.R')
runApp('Week 10 intro to R shiny/app-V2_ggmap.R')
library(shiny)
library(ggplot2)
library(shinyTime)
# Define UI for app
ui <- pageWithSidebar(
headerPanel("View Singapore Taxi Availability"),
sidebarPanel(
dateInput(inputId = "date", "Date:", value = Sys.Date()),
timeInput(inputId = "time", "Time:", value=Sys.time()),
radioButtons(inputId = "format",label="View Format",
choices = c("Point","Heatmap"))
),
mainPanel (
plotOutput("plotAvailability")
)
)
# Define server logic
server <- function(input, output) {
#Compared to V1, now map is loaded at the beginning when server is launched
getMap <- reactive({
get_map('Singapore', zoom = 11, maptype = input$mapType)}
)
#Compared to V1, use reactive in the function so that only when date or time is
#changed, the data is reloaded
getAvailabilityData <- reactive( {
print("Get Data ...")
date <- as.character(input$date)
time <- strftime(input$time, "%T")
url = "https://api.data.gov.sg/v1/transport/taxi-availability?date_time="
url <- paste0(url,date,"T",time)
data <- fromJSON(url)
data <- as.data.frame(data$features$geometry$coordinates)
colnames(data) <- c("long","lat")
data
})
output$plotAvailability <-renderPlot(
{
if(input$format=='Point') {
ggmap(map) +  geom_point(data=getAvailabilityData(), aes(x = long, y = lat),color='red',alpha=0.5)
}
else if (input$format == 'Heatmap'){
ggmap(map) + stat_density2d(data=getAvailabilityData(), aes(x=long, y=lat,  fill = ..level.., alpha = ..level..), size = 2, geom = 'polygon')+
scale_fill_gradient(low = "green", high = "red", guide=FALSE) + scale_alpha(range = c(0, 1), guide = FALSE)
}
else {print("Wrong format name")}
}
)
}
shinyApp(ui = ui, server = server)
runApp('R Course/app-V3.R')
runApp('Week 10 intro to R shiny/app-V2_ggmap.R')
runApp('Week 10 intro to R shiny/app-V2_ggmap.R')
runApp('Week 10 intro to R shiny/app-V2_ggmap.R')
knitr::opts_chunk$set(echo = TRUE)
install.packages("mapboxer")
library(mapboxer)
# Format is c(longitude, latitude)
COORDINATES_SINGAPORE <- c(103.8198, 1.3521)
mapboxer(style = basemaps$Carto$dark_matter,center = COORDINATES_SINGAPORE,zoom = 10,minZoom = 7 ) %>%add_layer(     list(       id = "heatmap_overlay",type = "heatmap",source = as_mapbox_source(df)))
runApp('C:/Users/ytyyu/Downloads/Telegram Desktop')
runApp('C:/Users/ytyyu/Downloads/Telegram Desktop')
shiny::runApp('C:/Users/ytyyu/Downloads/Telegram Desktop')
runApp('C:/Users/ytyyu/Downloads/Telegram Desktop')
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
ui <- fluidPage(
titlePanel("random draws from normal vs uniform distributions"),
sidebarLayout(position = "right",
sidebarPanel(
sliderInput(inputId = "num",
label = "Choose numbern of draws",
value = 25, min = 1000, max = 10000)
),
mainPanel(
tabsetPanel(
tabPanel("Frequency",plotOutput("hist")),
tabPanel("Density",plotOutput("den"))
)
)
)
)
server <- function(input, output) {
data<-reactive({
rbind(data.frame(value=rnorm(input$num),dist=rep("normal",input$num)),
data.frame(value=runif(input$num,-2,2),dist=rep("uniform",input$num)))
})
output$hist <- renderPlot({
p<-ggplot(data(), aes(x=value,fill=dist))+theme_grey(base_size=20)
p+geom_histogram(binwidth=0.1,position="dodge")+labs(title="histogram")
})
output$den <- renderPlot({
p<-ggplot(data(), aes(x=value,fill=dist))+theme_grey(base_size=20)
p+geom_density(alpha=1/3)+labs(title="density plot")
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
# Define the API endpoint URL
url <- "http://datamall2.mytransport.sg/ltaodataservice/PCDForecast"
# Define your API key
api_key <- "YS+Bv4YyR7+H6BhosEALvQ=="
# Define the train line for which you want the crowdedness data
train_line <- "EWL"
# Define the headers for the HTTP GET request
headers <- add_headers("AccountKey" = api_key)
# Define the query parameters for the HTTP GET request
params <- list(TrainLine = train_line)
# Send the HTTP GET request
response <- GET(url, headers = headers, query = params)
# Extract the content of the response as a text string
json_content <- content(response, as = "text")
# Parse the JSON object into a data frame
df <- fromJSON(json_content, flatten = TRUE)
library(jqr)
df <- content(response, as = "text") %>%
jq(".value[].Stations") %>%
fromJSON()
df <- content(response)
# Print the resulting data frame
print(df)
# Define the API endpoint URL
url <- "http://datamall2.mytransport.sg/ltaodataservice/PCDForecast"
# Define your API key
api_key <- "YS+Bv4YyR7+H6BhosEALvQ=="
# Define the train line for which you want the crowdedness data
train_line <- "EWL"
# Define the headers for the HTTP GET request
headers <- add_headers("AccountKey" = api_key)
# Define the query parameters for the HTTP GET request
params <- list(TrainLine = train_line)
# Send the HTTP GET request
response <- GET(url, headers = headers, query = params)
df <- content(response)
# Print the resulting data frame
print(df)
# Define the API endpoint URL
url <- "http://datamall2.mytransport.sg/ltaodataservice/PCDForecast"
# Define your API key
api_key <- "YS+Bv4YyR7+H6BhosEALvQ=="
# Define the train line for which you want the crowdedness data
train_line <- "EWL"
# Define the headers for the HTTP GET request
headers <- add_headers("AccountKey" = api_key)
# Define the query parameters for the HTTP GET request
params <- list(TrainLine = train_line)
# Send the HTTP GET request
response <- GET(url, headers = headers, query = params)
df <- content(response)
# Print the resulting data frame
print(df)
library(httr)
library(jsonlite)
# Set the API endpoint URL and API key
api_key <- "YS+Bv4YyR7+H6BhosEALvQ=="
url <- "http://datamall2.mytransport.sg/ltaodataservice/PCDForecast"
# Define the train line for which you want the crowdedness data
train_line <- "NEL"
# Define the query parameters for the HTTP GET request
query_params <- list(TrainLine = train_line)
# Send an HTTP GET request with the API key and query parameters
response <- GET(url, add_headers(AccountKey = api_key), query = query_params)
# Parse the JSON object into a data frame
df <- content(response)
library(jqr)
df <- content(response, as = "text") %>%
jq(".value[].Stations") %>%
fromJSON()
# Write the resulting data frame to a CSV file
write.csv(df, "forecast_data.csv", row.names = FALSE)
# Print the resulting data frame
print(df)
library(httr)
library(jsonlite)
# Set the API endpoint URL and API key
api_key <- "YS+Bv4YyR7+H6BhosEALvQ=="
url <- "http://datamall2.mytransport.sg/ltaodataservice/PCDForecast"
# Define the train line for which you want the crowdedness data
train_line <- "NEL"
# Define the query parameters for the HTTP GET request
query_params <- list(TrainLine = train_line)
# Send an HTTP GET request with the API key and query parameters
response <- GET(url, add_headers(AccountKey = api_key), query = query_params)
# Parse the JSON object into a data frame
df <- content(response)
library(jqr)
df <- content(response, as = "text") %>%
jq(".value[].Stations") %>%
fromJSON()
# Print the resulting data frame
print(df)
library(httr)
response <- GET("https://kiasutraveler-api.onrender.com/")
data <- content(response, as = "text") %>% fromJSON(flatten = TRUE)
knitr::opts_chunk$set(echo = TRUE)
response <- GET("https://kiasutraveler-api.onrender.com/")
data <- content(response, as = "text") %>% fromJSON(flatten = TRUE)
response <- GET("https://kiasutraveler-api.onrender.com/")
data <- content(response, as = "text") %>% fromJSON(flatten = TRUE)
library(magrittr)
data <- content(response, as = "text") %>% fromJSON(flatten = TRUE)
library(jsonlite)
data <- content(response, as = "text") %>% fromJSON(flatten = TRUE)
response <- GET("https://kiasutraveler-api.onrender.com/")
content(response, as = "text")
# Define the endpoint URL
url <- "response"
# Define the query parameters
params <- list(q = "Singapore", output = "json")
# Make an HTTP GET request and get the response
response <- GET(url, query = params)
# Define the endpoint URL
url <- "https://kiasutraveler-api.onrender.com/"
# Define the query parameters
params <- list(q = "Singapore", output = "json")
# Make an HTTP GET request and get the response
response <- GET(url, query = params)
# Parse the response content as JSON
content <- fromJSON(rawToChar(response$content))
shiny::runApp('~/GitHub/kiasutraveler')
runApp('~/GitHub/kiasutraveler')
